{"version":3,"sources":["Header.js","CardDisplay.js","Loading.js","News.js","App.js","serviceWorker.js","index.js"],"names":["Header","id","Component","CardDisplay","Card","Img","src","this","props","urlToImage","Body","Title","title","Text","description","Loading","News","state","isLoaded","news","fetch","process","then","res","json","result","setState","error","Set","console","log","key","map","item","href","url","target","React","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iWAYeA,G,uLARP,OACI,yBAAKC,GAAK,UACN,oD,GAJKC,c,OCiBNC,G,uLAbP,OACI,kBAACC,EAAA,EAAD,CAAMH,GAAK,kBACP,kBAACG,EAAA,EAAKC,IAAN,CAAUC,IAAOC,KAAKC,MAAMC,WAAYR,GAAK,UAC7C,kBAACG,EAAA,EAAKM,KAAN,CAAWT,GAAK,YACZ,kBAACG,EAAA,EAAKO,MAAN,CAAYV,GAAK,SAASM,KAAKC,MAAMI,OACrC,kBAACR,EAAA,EAAKS,KAAN,CAAWZ,GAAK,eACXM,KAAKC,MAAMM,mB,GARVZ,cCKXa,G,uLAJP,OAAO,yBAAKd,GAAK,UAAV,S,GAFOC,cCoEPc,G,kBAjEd,WAAYR,GAAO,IAAD,8BACjB,4CAAMA,KAEDS,MAAQ,CACZC,UAAU,EACVC,KAAM,IALU,E,iFASG,IAAD,OAEnBC,MAAM,8JAAD,OAKOC,qCACVC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UACjBF,MACA,SAACG,GACA,EAAKC,SAAS,CACbR,UAAU,EACVC,KAAOM,OAIT,SAACE,GACA,EAAKD,SAAS,CACbC,e,+BAMI,IAAD,EACgBpB,KAAKU,MAAvBC,EADE,EACFA,SAAUC,EADR,EACQA,KACfA,EAAI,YAAO,IAAIS,IAAIT,EAAI,WACvBU,QAAQC,IAAIX,GACZ,IAAIY,EAAM,EAGV,OAAO,6BACJb,EACD,oCACC,kBAAC,EAAD,MACA,yBAAKjB,GAAK,iBACRkB,EAAKa,KAAK,SAAAC,GAAI,OACd,uBAAGC,KAAQD,EAAKE,IAAKC,OAAU,SAAUL,IAAOA,IAAO9B,GAAK,KAC3D,kBAAC,EAAD,CAAa8B,IAAOA,IACnBnB,MAASqB,EAAKrB,MACdE,YAAemB,EAAKnB,YACpBL,WAAcwB,EAAKxB,mBATZ,kBAAE,EAAF,W,GA3CG4B,IAAMnC,YCWVoC,G,6LARb,OACC,yBAAKC,UAAU,OACd,kBAAC,EAAD,W,GALcrC,cCOEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.4e202fcd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Header.css'\r\nclass Header extends Component {\r\n    render(){\r\n        return(\r\n            <div id = \"header\">\r\n                <h2 > Top Headlines </h2>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport './CardDisplay.css'\r\n\r\nclass CardDisplay extends Component {\r\n    render(){\r\n        return(\r\n            <Card id = \"cardIndividual\">\r\n                <Card.Img src = {this.props.urlToImage} id = \"image\"/>\r\n                <Card.Body id = \"cardText\">\r\n                    <Card.Title id = \"title\">{this.props.title}</Card.Title>\r\n                    <Card.Text id = \"description\">\r\n                        {this.props.description}\r\n                    </Card.Text>\r\n                </Card.Body>\r\n            </Card>\r\n        );\r\n    }\r\n}\r\nexport default CardDisplay;","import React, { Component } from 'react';\r\nimport './Loading.css';\r\n\r\nclass Loading extends Component {\r\n    render(){\r\n        return <div id = \"loader\"> </div>\r\n    }\r\n}\r\n\r\nexport default Loading;","import React from 'react';\nimport Header from './Header';\nimport CardDisplay from './CardDisplay' \nimport Loading from './Loading'\nimport './News.css'\nclass News extends React.Component {\n\tconstructor(props){\n\t\tsuper(props)\n\t\t\n\t\tthis.state = {\n\t\t\tisLoaded: false,\n\t\t\tnews: []\n\t\t}\n\t}\n\t\n\tcomponentDidMount() {\n\t\t// let d = new Date();\n\t\tfetch( `https://cors-anywhere.herokuapp.com/\n\t\t\t\thttp://newsapi.org/v2/top-headlines?\n\t\t\t\tq=\n\t\t\t\t&country=in\n\t\t\t\t&pageSize=32\n\t\t\t\t&apiKey=${process.env.REACT_APP_API_KEY}`)\n\t\t\t.then( res => res.json())\n\t\t\t.then(\n\t\t\t\t(result) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tisLoaded: true,\n\t\t\t\t\t\tnews : result\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t(error) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\terror\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t)\n\t}\n\n\trender(){\n\t\tlet {isLoaded ,news} = this.state;\n\t\tnews = [...new Set(news['articles'])];\n\t\tconsole.log(news);\n\t\tlet key = 0;\n\t\n\t\t// parse(news[1]['content']).replace(/\\[.*\\]/, \"\")\n\t\treturn(<div>\n\t\t\t{!isLoaded ? < Loading/> : \n\t\t\t\t<>\n\t\t\t\t\t<Header />\n\t\t\t\t\t<div id = \"cardContainer\">\n\t\t\t\t\t\t{news.map( item => (\n\t\t\t\t\t\t\t<a href = {item.url} target = {\"_blank\"} key = {key++} id = \"a\">\n\t\t\t\t\t\t\t\t<CardDisplay key = {key++}\n\t\t\t\t\t\t\t\t\ttitle = {item.title}\n\t\t\t\t\t\t\t\t\tdescription = {item.description}\n\t\t\t\t\t\t\t\t\turlToImage = {item.urlToImage}\n\t\t\t\t\t\t\t\t/>\t\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t))\n\t\t\t\t\t\t}\n\t\t\t\t\t</div>\n\t\t\t\t</>\n\t\t\t}\n\t\t\t\t\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default News","import React, { Component } from 'react';\nimport News from './News';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\t\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<News />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}